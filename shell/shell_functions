#!/bin/bash

# Fancier diff
function fdiff() {
  git diff --color --no-index $@
}

# Create a new directory and enter it
function mdcd() {
  mkdir -p "$@" && cd "$@"
}

# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}

function localip() {
  function _localip() { echo "ðŸ“¶  "$(ipconfig getifaddr "$1"); }
  export -f _localip
  local purple="\x1B\[35m" reset="\x1B\[m"
  networksetup -listallhardwareports | \
    sed -r "s/Hardware Port: (.*)/${purple}\1${reset}/g" | \
    sed -r "s/Device: (en.*)$/_localip \1/e" | \
    sed -r "s/Ethernet Address:/ðŸ“˜ /g" | \
    sed -r "s/(VLAN Configurations)|==*//g"
}

# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
  if [ -f "$1" ] ; then
    local filename=$(basename "$1")
    local foldername="${filename%%.*}"
    local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
    local didfolderexist=false
    if [ -d "$foldername" ]; then
      didfolderexist=true
      read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
      echo
      if [[ $REPLY =~ ^[Nn]$ ]]; then
        return
      fi
    fi
    mkdir -p "$foldername" && cd "$foldername"
    case $1 in
      *.tar.bz2) tar vxjf "$fullpath" ;;
      *.tar.gz) tar vxzf "$fullpath" ;;
      *.tar.xz) tar vJxvf "$fullpath" ;;
      *.tar.Z) tar vxzf "$fullpath" ;;
      *.tar) tar vxf "$fullpath" ;;
      *.taz) tar vxzf "$fullpath" ;;
      *.tb2) tar vxjf "$fullpath" ;;
      *.tbz) tar vxjf "$fullpath" ;;
      *.tbz2) tar vxjf "$fullpath" ;;
      *.tgz) tar vxzf "$fullpath" ;;
      *.txz) tar vJxvf "$fullpath" ;;
      *.zip) unzip "$fullpath" ;;
      *) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# who is using the laptop's iSight camera?
camerausedby () {
  echo "Checking to see who is using the iSight cameraâ€¦ ðŸ“·"
  usedby=$(lsof | grep -w "AppleCamera\|USBVDC\|iSight" | awk '{printf $2"\n"}' | xargs ps)
  echo -e "Recent camera uses:\n$usedby"
}


# animated gifs from any video
# from Alex Sexton gist.github.com/SlexAxton/4989674
gifify () {
  if [[ -n "$1" ]]; then
  if [[ $2 == '--good' ]]; then
    ffmpeg -i "$1" -r 10 -vcodec png out-static-%05d.png
    time convert -verbose +dither -layers Optimize -resize 900x900\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > "$1.gif"
    rm out-static*.png
  else
    ffmpeg -i "$1" -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > "$1.gif"
  fi
  else
  echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

# turn that video into webm.
# brew reinstall ffmpeg --with-libvpx
webmify () {
  ffmpeg -i "$1" -vcodec libvpx -acodec libvorbis -isync -copyts -aq 80 -threads 3 -qmax 30 -y "$2" "$1.webm"
}

update_pkgs () {
  case "$1" in
    pip*)
      $1 install --upgrade pip
      $1 list --outdated --format=freeze|\
        grep -v '^\-e' | cut -d = -f 1  |\
        xargs -n1 $1 install -U --
      ;;
    brew)
      brew -v update
      brew upgrade
      ;;
    cask)
      brew cask upgrade
      ;;
    pacman)
      pacman -Syu
      ;;
    npm)
      npm install -g npm
      npm update -g
      ;;
    gem)
      sudo gem update --system
      sudo gem update --no-rdoc --no-ri
      ;;
    *)
      echo "UNKNOWN OPTION: $1"
      echo "gem/npm/pip*/brew/cask/pacman expected"
      return 1
      ;;
  esac
}

function pbpygment() {
  local lexer="$1"

  # macOS
  if command -v pbpaste >/dev/null; then
    pbpaste |\
      pygmentize -l "$lexer" -f rtf |\
      pbcopy -Prefer rtf
  # linux
  elif command -v xclip >/dev/null; then
    xclip -se c -o |\
      pygmentize -l "$lexer" -f html -O noclasses=true |\
      xclip -se c -t text/html
  else
    echo "expected pbpaste or xclip"
    return 1
  fi
}

function nullhost() {
  # progress meter for POST/PUT is only shown when output is redirected
  curl -F"file=@$1" 'https://0x0.st' | cat
}

function nullshort() {
  curl -sS -F"shorten=$1" 'https://0x0.st'
}

function vmbymac() {
  # https://github.com/vmware/govmomi/issues/1201
  mac="$(tr '[:upper:]' '[:lower:]' <<<"$1")"
  govc object.collect -json -type m / config.hardware.device | jq -r '. | select(.ChangeSet[].Val.VirtualDevice[].MacAddress == "'"$mac"'") | [.Obj.Type, .Obj.Value] | join(":")' | xargs govc ls -L
}

# thefuck with command not found handler
if command -v thefuck>/dev/null; then
  eval $(thefuck --alias)
  command_not_found_handler() {
    TF_SHELL_ALIASES="$(alias)"
    TF_CMD="$(
      export TF_SHELL_ALIASES;
      export TF_SHELL=zsh;
      export TF_HISTORY="$@";
      export PYTHONIOENCODING=utf-8;
      thefuck THEFUCK_ARGUMENT_PLACEHOLER
    )" && eval "$TF_CMD"

    (test -n "$TF_CMD" && print -s "$TF_CMD") || echo "$0: command not found"
  }
fi
